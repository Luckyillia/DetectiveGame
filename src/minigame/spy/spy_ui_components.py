from nicegui import ui
from datetime import datetime


class SpyComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∏–≥—Ä—ã –®–ø–∏–æ–Ω"""

    @staticmethod
    def create_header(title, subtitle=None, icon_name=None):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        with ui.column().classes('w-full items-center'):
            if icon_name:
                ui.icon(icon_name).classes('text-3xl text-red-500 dark:text-red-400 mb-2')

            ui.label(title).classes('text-2xl font-bold text-center text-red-600 dark:text-red-400')

            if subtitle:
                ui.label(subtitle).classes('text-center text-gray-600 dark:text-gray-300')

    @staticmethod
    def create_status_indicator(text, status_type="info"):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º –∏ –∏–∫–æ–Ω–∫–æ–π"""
        status_configs = {
            "info": {"icon": "info", "bg": "bg-red-100 dark:bg-red-900",
                     "text": "text-red-700 dark:text-red-300"},
            "waiting": {"icon": "hourglass_empty", "bg": "bg-amber-100 dark:bg-amber-900",
                        "text": "text-amber-700 dark:text-amber-300"},
            "success": {"icon": "check_circle", "bg": "bg-green-100 dark:bg-green-900",
                        "text": "text-green-700 dark:text-green-300"},
            "error": {"icon": "error", "bg": "bg-red-100 dark:bg-red-900", "text": "text-red-700 dark:text-red-300"},
            "warning": {"icon": "warning", "bg": "bg-yellow-100 dark:bg-yellow-900",
                        "text": "text-yellow-700 dark:text-yellow-300"}
        }

        config = status_configs.get(status_type, status_configs["info"])

        with ui.row().classes(f'items-center justify-center {config["bg"]} rounded-lg p-3 w-full'):
            ui.icon(config["icon"]).classes(f'{config["text"]} text-2xl mr-2')
            ui.label(text).classes(f'text-lg font-medium {config["text"]}')

    @staticmethod
    def create_player_table(players, current_round=0, current_user_id=None, vote_handler=None, votes=None,
                            spy_index=None):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã –®–ø–∏–æ–Ω

        Args:
            players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            current_round: –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã (0-3)
            current_user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            vote_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            votes: –°–ª–æ–≤–∞—Ä—å –≥–æ–ª–æ—Å–æ–≤ (–∫–ª—é—á - ID –∏–≥—Ä–æ–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - ID –∏–≥—Ä–æ–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏)
            spy_index: –ò–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞-—à–ø–∏–æ–Ω–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        columns = [
            {'name': 'index', 'label': '‚Ññ', 'field': 'index', 'align': 'center', 'width': '50px'},
            {'name': 'name', 'label': '–ò–º—è –∏–≥—Ä–æ–∫–∞', 'field': 'name', 'align': 'center'}
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
        if current_round == 0:
            columns.append({'name': 'status', 'label': '–°—Ç–∞—Ç—É—Å', 'field': 'status', 'align': 'center'})
            columns.append(
                {'name': 'last_action', 'label': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', 'field': 'last_action', 'align': 'center'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Ä–æ–ª–∏ –¥–ª—è –∏–≥—Ä—ã
        if current_round == 1:
            columns.append({'name': 'role', 'label': '–†–æ–ª—å', 'field': 'role', 'align': 'center'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if current_round >= 2:
            columns.append({'name': 'votes', 'label': '–ì–æ–ª–æ—Å–æ–≤', 'field': 'votes', 'align': 'center'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if current_round == 3:
            columns.append({'name': 'final_role', 'label': '–†–æ–ª—å', 'field': 'final_role', 'align': 'center'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if current_round == 2:
            columns.append({'name': 'action', 'label': '–î–µ–π—Å—Ç–≤–∏–µ', 'field': 'action', 'align': 'center'})

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        rows = []

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        vote_counts = {}
        if votes and current_round >= 2:
            for voted_id in votes.values():
                vote_counts[voted_id] = vote_counts.get(voted_id, 0) + 1

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for i, player in enumerate(players):
            player_id = player.get('id', '')
            player_name = player.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫')
            is_host = player.get('is_host', False)
            is_ready = player.get('is_ready', False)

            row = {
                'id': player_id,
                'index': i + 1,
                'name': player_name
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
            if current_round == 0:
                # –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                status = []
                if is_host:
                    status.append('üëë –í–µ–¥—É—â–∏–π')
                if is_ready:
                    status.append('‚úÖ –ì–æ—Ç–æ–≤')
                else:
                    status.append('‚è≥ –ù–µ –≥–æ—Ç–æ–≤')
                row['status'] = ', '.join(status)

                # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                last_action_time = player.get('last_action', player.get('joined_at', 0))
                row['last_action'] = datetime.fromtimestamp(last_action_time).strftime(
                    '%H:%M:%S') if last_action_time else '‚Äî'

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –¥–ª—è –∏–≥—Ä—ã (—Ä–∞—É–Ω–¥ 1)
            if current_round == 1:
                # –†–æ–ª—å –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–º—É –∏–≥—Ä–æ–∫—É
                is_current_player = (player_id == current_user_id)
                is_spy = (i == spy_index)

                if is_current_player:
                    if is_spy:
                        row['role'] = '–®–ø–∏–æ–Ω'
                    else:
                        # –†–æ–ª—å –æ–±—ã—á–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Ä–æ–ª—å
                        row['role'] = 'üé≠ –í–∞—à–∞ —Ä–æ–ª—å'  # –†–æ–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                else:
                    row['role'] = '???'

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if current_round >= 2:
                row['votes'] = vote_counts.get(player_id, 0)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–æ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if current_round == 3 and spy_index is not None:
                is_spy = (i == spy_index)
                row['final_role'] = '–®–ø–∏–æ–Ω' if is_spy else '–û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫'
                row['is_spy'] = is_spy  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–µ

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
            rows.append(row)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–ª—é—á–æ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
        table = ui.table(
            columns=columns,
            rows=rows,
            row_key='id',
            column_defaults={'align': 'center', 'headerClasses': 'uppercase text-primary'}
        ).classes('w-full')

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ª–æ—Ç body –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        body_template = '''
        <q-tr :props="props">
            <q-td v-for="col in props.cols" :key="col.name" :props="props" class="text-center">
                <!-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ -->
                <template v-if="col.name === 'status'">
                    <div class="flex justify-center items-center gap-2">
                        <span>{{ col.value }}</span>
                    </div>
                </template>

                <!-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ -->
                <template v-else-if="col.name === 'votes'">
                    <div class="font-medium">
                        {{ col.value }}
                    </div>
                </template>

                <!-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º -->
                <template v-else-if="col.name === 'final_role'">
                    <div :class="[
                        props.row.is_spy 
                            ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' 
                            : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
                        'px-2 py-1 rounded-full font-medium inline-block'
                    ]">
                        {{ col.value }}
                    </div>
                </template>

                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è -->
                <template v-else-if="col.name === 'action'">
                    <div class="flex justify-center">
                        <div v-if="props.row.id === '%s'">
                            <span class="text-gray-500 dark:text-gray-400 text-sm">–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è</span>
                        </div>
                        <div v-else>
                            <q-btn v-if="!%s" color="primary" dense icon="how_to_vote" size="md"
                                   @click="() => $parent.$emit('vote', props.row.id)">–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å</q-btn>
                            <span v-else-if="props.row.id === '%s'" class="text-green-600 dark:text-green-400 font-medium">
                                –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ ‚úì
                            </span>
                        </div>
                    </div>
                </template>

                <!-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -->
                <template v-else>
                    <span>{{ col.value }}</span>
                </template>
            </q-td>
        </q-tr>
        ''' % (
            current_user_id or '',  # ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–±—è
            str(bool(votes and current_user_id in votes)).lower(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏
            votes.get(current_user_id, '') if votes and current_user_id in votes else ''
        # ID —Ç–æ–≥–æ, –∑–∞ –∫–æ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        )

        table.add_slot('body', body_template)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if current_round == 2 and vote_handler:
            table.on('vote', lambda e: vote_handler(e.args))

        return table

    @staticmethod
    def create_location_display(category, location, is_spy):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏"""
        if is_spy:
            with ui.card().classes('bg-red-100 dark:bg-red-900 p-4 mb-4 rounded-lg shadow-inner'):
                ui.label('–í—ã - –®–ø–∏–æ–Ω!').classes('text-center mb-2 text-red-700 dark:text-red-300 font-bold text-xl')
                ui.label(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}').classes('text-center mb-2 text-red-800 dark:text-red-200 text-lg')
                ui.label('–í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é. –í—ã—è—Å–Ω–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–µ –≤—ã–¥–∞–≤ —Å–µ–±—è!').classes(
                    'text-center text-red-800 dark:text-red-200')
        else:
            with ui.card().classes('bg-blue-100 dark:bg-blue-900 p-4 mb-4 rounded-lg shadow-inner'):
                ui.label(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}').classes('text-center mb-2 text-blue-700 dark:text-blue-300 text-lg')
                ui.label('–õ–æ–∫–∞—Ü–∏—è:').classes('text-center mb-2 text-blue-700 dark:text-blue-300')
                ui.label(location).classes('text-3xl font-bold text-center text-blue-800 dark:text-blue-200 mb-2')
                ui.label('–ù–∞–π–¥–∏—Ç–µ –®–ø–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ!').classes('text-center text-blue-700 dark:text-blue-300')

    @staticmethod
    def create_round_indicator(current_round):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã"""
        round_text = {
            0: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ",
            1: "–û–±—Å—É–∂–¥–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)",
            2: "–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            3: "–û–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        }

        text = round_text.get(current_round, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø")

        with ui.row().classes(
                'items-center justify-center bg-red-100 dark:bg-red-900 rounded-lg p-3 mt-2 w-full'):
            ui.icon('info').classes('text-red-500 dark:text-red-400 text-2xl mr-2')
            ui.label(f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {text}").classes('text-lg font-medium text-red-700 dark:text-red-300')

    @staticmethod
    def create_game_result_card(spy_caught, spy_name, location, spy_won=False):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã"""
        if spy_won:
            with ui.card().classes('bg-red-100 dark:bg-red-900 p-4 mb-4 rounded-lg'):
                ui.label(f'–®–ø–∏–æ–Ω ({spy_name}) –ø–æ–±–µ–¥–∏–ª!').classes(
                    'text-center text-red-700 dark:text-red-300 font-bold text-lg mb-2')
                ui.label('–®–ø–∏–æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª –ª–æ–∫–∞—Ü–∏—é!').classes(
                    'text-center text-red-800 dark:text-red-200')
                ui.label(f'–õ–æ–∫–∞—Ü–∏—è –±—ã–ª–∞: {location}').classes('text-center mt-2')
        elif spy_caught:
            with ui.card().classes('bg-green-100 dark:bg-green-900 p-4 mb-4 rounded-lg'):
                ui.label(f'–®–ø–∏–æ–Ω ({spy_name}) –±—ã–ª –ø–æ–π–º–∞–Ω!').classes(
                    'text-center text-green-700 dark:text-green-300 font-bold text-lg mb-2')
                ui.label('–û–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏!').classes(
                    'text-center text-green-800 dark:text-green-200')
                ui.label(f'–õ–æ–∫–∞—Ü–∏—è –±—ã–ª–∞: {location}').classes('text-center mt-2')
        else:
            with ui.card().classes('bg-red-100 dark:bg-red-900 p-4 mb-4 rounded-lg'):
                ui.label('–®–ø–∏–æ–Ω –Ω–µ –±—ã–ª –ø–æ–π–º–∞–Ω! –®–ø–∏–æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç!').classes(
                    'text-center text-red-700 dark:text-red-300 font-bold text-lg mb-2')
                ui.label(f'–®–ø–∏–æ–Ω–æ–º –±—ã–ª –∏–≥—Ä–æ–∫ {spy_name}').classes(
                    'text-center text-red-800 dark:text-red-200 mb-2')
                ui.label(f'–õ–æ–∫–∞—Ü–∏—è –±—ã–ª–∞: {location}').classes('text-center text-red-800 dark:text-red-200')

    @staticmethod
    def create_timer_display(start_time, duration, title="–í—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞"):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        import time

        elapsed = int(time.time() - start_time)
        remaining = max(0, duration - elapsed)

        minutes = remaining // 60
        seconds = remaining % 60

        color_class = "text-green-600" if remaining > 60 else "text-red-600"

        with ui.card().classes('p-3 bg-gray-100 dark:bg-gray-800 rounded-lg mb-4'):
            with ui.row().classes('items-center justify-center'):
                ui.icon('timer').classes(f'{color_class} text-xl mr-2')
                ui.label(title).classes('font-medium mr-4')
                ui.label(f'{minutes:02d}:{seconds:02d}').classes(f'{color_class} font-bold text-xl')