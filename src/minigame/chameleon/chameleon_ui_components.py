from nicegui import ui
import random
import string
from datetime import datetime


class ChameleonComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∏–≥—Ä—ã –•–∞–º–µ–ª–µ–æ–Ω"""

    @staticmethod
    def create_header(title, subtitle=None, icon_name=None):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        with ui.column().classes('w-full items-center'):
            if icon_name:
                ui.icon(icon_name).classes('text-3xl text-indigo-500 dark:text-indigo-400 mb-2')

            ui.label(title).classes('text-2xl font-bold text-center text-indigo-600 dark:text-indigo-400')

            if subtitle:
                ui.label(subtitle).classes('text-center text-gray-600 dark:text-gray-300')

    @staticmethod
    def create_status_indicator(text, status_type="info"):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º –∏ –∏–∫–æ–Ω–∫–æ–π"""
        status_configs = {
            "info": {"icon": "info", "bg": "bg-indigo-100 dark:bg-indigo-900",
                     "text": "text-indigo-700 dark:text-indigo-300"},
            "waiting": {"icon": "hourglass_empty", "bg": "bg-amber-100 dark:bg-amber-900",
                        "text": "text-amber-700 dark:text-amber-300"},
            "success": {"icon": "check_circle", "bg": "bg-green-100 dark:bg-green-900",
                        "text": "text-green-700 dark:text-green-300"},
            "error": {"icon": "error", "bg": "bg-red-100 dark:bg-red-900", "text": "text-red-700 dark:text-red-300"},
            "warning": {"icon": "warning", "bg": "bg-yellow-100 dark:bg-yellow-900",
                        "text": "text-yellow-700 dark:text-yellow-300"}
        }

        config = status_configs.get(status_type, status_configs["info"])

        with ui.row().classes(f'items-center justify-center {config["bg"]} rounded-lg p-3 w-full'):
            ui.icon(config["icon"]).classes(f'{config["text"]} text-2xl mr-2')
            ui.label(text).classes(f'text-lg font-medium {config["text"]}')

    @staticmethod
    def create_player_table(players, current_round=0, current_user_id=None, vote_handler=None, votes=None,
                            chameleon_index=None):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –∏–≥—Ä—ã

        Args:
            players: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            current_round: –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã (0-3)
            current_user_id: ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            vote_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            votes: –°–ª–æ–≤–∞—Ä—å –≥–æ–ª–æ—Å–æ–≤ (–∫–ª—é—á - ID –∏–≥—Ä–æ–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - ID –∏–≥—Ä–æ–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–¥–∞–Ω –≥–æ–ª–æ—Å)
            chameleon_index: –ò–Ω–¥–µ–∫—Å –∏–≥—Ä–æ–∫–∞-–•–∞–º–µ–ª–µ–æ–Ω–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        columns = [
            {'name': 'index', 'label': '‚Ññ', 'field': 'index', 'align': 'center', 'width': '50px'},
            {'name': 'name', 'label': '–ò–º—è', 'field': 'name', 'align': 'left'},
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
        if current_round == 0:
            columns.append({'name': 'status', 'label': '–°—Ç–∞—Ç—É—Å', 'field': 'status', 'align': 'center'})
            columns.append(
                {'name': 'last_action', 'label': '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', 'field': 'last_action', 'align': 'center'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if current_round >= 2:
            columns.append({'name': 'votes', 'label': '–ì–æ–ª–æ—Å–æ–≤', 'field': 'votes', 'align': 'center'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ä–æ–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if current_round == 3:
            columns.append({'name': 'role', 'label': '–†–æ–ª—å', 'field': 'role', 'align': 'center'})

        # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if current_round == 2:
            columns.append({'name': 'action', 'label': '–î–µ–π—Å—Ç–≤–∏–µ', 'field': 'action', 'align': 'center'})

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        rows = []

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        vote_counts = {}
        if votes and current_round >= 2:
            for voted_id in votes.values():
                vote_counts[voted_id] = vote_counts.get(voted_id, 0) + 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        for i, player in enumerate(players):
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ
            row = {
                'id': player.get('id', ''),  # –ù—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                'index': str(i + 1),
                'name': player.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'),
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
            if current_round == 0:
                status_items = []
                if player.get("is_host", False):
                    status_items.append("üëë –í–µ–¥—É—â–∏–π")
                if player.get("is_ready", False):
                    status_items.append("‚úÖ –ì–æ—Ç–æ–≤")
                else:
                    status_items.append("‚è≥ –ù–µ –≥–æ—Ç–æ–≤")
                row['status'] = ", ".join(status_items)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                last_action_time = player.get("last_action", player.get("joined_at", 0))
                if last_action_time:
                    formatted_time = datetime.fromtimestamp(last_action_time).strftime("%H:%M:%S")
                    row['last_action'] = formatted_time
                else:
                    row['last_action'] = "‚Äî"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if current_round >= 2:
                row['votes'] = str(vote_counts.get(player.get('id', ''), 0))

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if current_round == 3 and chameleon_index is not None:
                is_chameleon = (i == chameleon_index)
                row['role'] = '–•–∞–º–µ–ª–µ–æ–Ω' if is_chameleon else '–û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫'

            rows.append(row)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = ui.table(columns=columns, rows=rows).classes('w-full').props('flat bordered')

        # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if current_round == 2 and vote_handler and current_user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            has_voted = current_user_id in (votes or {})

            if has_voted:
                voted_for_id = votes.get(current_user_id)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —è—á–µ–π–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
                for i, player in enumerate(players):
                    player_id = player.get('id', '')
                    with table.add_slot('body-cell-action',
                                        f"{{row: {{index: '{i + 1}', name: '{player['name']}', votes: '{vote_counts.get(player_id, 0)}'}}}}"):
                        if player_id == voted_for_id:
                            ui.label('–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ ‚úì').classes('text-green-600 dark:text-green-400 font-medium')
                        else:
                            ui.label('')
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                for i, player in enumerate(players):
                    player_id = player.get('id', '')
                    with table.add_slot('body-cell-action',
                                        f"{{row: {{index: '{i + 1}', name: '{player['name']}', votes: '{vote_counts.get(player_id, 0)}'}}}}"):
                        if player_id != current_user_id:
                            ui.button(
                                '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å',
                                icon='how_to_vote',
                                on_click=lambda pid=player_id: vote_handler(pid)
                            ).props('size=sm color=primary')
                        else:
                            ui.label('–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è').classes('text-gray-500 dark:text-gray-400 text-sm')

        return table

    @staticmethod
    def create_word_grid(category, words):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–∫—É —Å–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Å–µ—Ç–∫–∏ 4x4
        while len(words) < 16:
            words.append("")

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        random.shuffle(words)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä –¥–ª—è —Å–µ—Ç–∫–∏
        letters = list(string.ascii_uppercase)[:4]  # A-D
        numbers = [str(i) for i in range(1, 5)]  # 1-4

        with ui.card().classes('w-full p-4 rounded-lg dark:bg-gray-800 mb-4'):
            ui.label(f'–°–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":').classes(
                'text-lg font-bold mb-3 text-gray-800 dark:text-gray-200')

            with ui.element('div').classes('w-full overflow-x-auto'):
                with ui.element('div').classes('grid grid-cols-5 gap-2 min-w-md mx-auto'):
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É
                    ui.label('').classes('p-2 text-center font-bold')

                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–±—É–∫–≤—ã)
                    for letter in letters:
                        ui.label(letter).classes(
                            'p-2 text-center font-bold bg-indigo-100 dark:bg-indigo-900 rounded-md')

                    # –°—Ç—Ä–æ–∫–∏
                    for row, number in enumerate(numbers):
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ (—á–∏—Å–ª–æ)
                        ui.label(number).classes(
                            'p-2 text-center font-bold bg-indigo-100 dark:bg-indigo-900 rounded-md')

                        # –Ø—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                        for col in range(4):
                            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                            word_index = row * 4 + col
                            cell_id = f"{letters[col]}{number}"

                            # –ë–µ—Ä–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                            word = words[word_index] if word_index < len(words) else ""

                            with ui.card().classes(
                                    'p-2 min-h-12 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-md shadow hover:shadow-md transition-shadow'):
                                ui.label(word).classes(
                                    'text-sm font-medium text-center text-gray-800 dark:text-gray-200')

    @staticmethod
    def create_round_indicator(current_round):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã"""
        round_text = {
            0: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ",
            1: "–ò–≥—Ä–æ–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç —Å–ª–æ–≤–æ",
            2: "–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            3: "–û–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        }

        text = round_text.get(current_round, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø")

        with ui.row().classes(
                'items-center justify-center bg-indigo-100 dark:bg-indigo-900 rounded-lg p-3 mt-2 w-full'):
            ui.icon('info').classes('text-indigo-500 dark:text-indigo-400 text-2xl mr-2')
            ui.label(f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {text}").classes('text-lg font-medium text-indigo-700 dark:text-indigo-300')

    @staticmethod
    def create_role_card(is_chameleon, word=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞"""
        if is_chameleon:
            with ui.card().classes('bg-yellow-100 dark:bg-yellow-900 p-4 mb-4 rounded-lg shadow-inner'):
                ui.label('–í—ã - –•–∞–º–µ–ª–µ–æ–Ω!').classes('text-center mb-2 text-yellow-700 dark:text-yellow-300 font-bold')
                ui.label('–í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ. –ü—Ä–∏—Ç–≤–æ—Ä–∏—Ç–µ—Å—å, —á—Ç–æ –∑–Ω–∞–µ—Ç–µ!').classes(
                    'text-center text-yellow-800 dark:text-yellow-200')
        else:
            with ui.card().classes('bg-green-100 dark:bg-green-900 p-4 mb-4 rounded-lg shadow-inner'):
                ui.label('–í—ã –∑–Ω–∞–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ:').classes('text-center mb-2 text-green-700 dark:text-green-300')
                ui.label(word).classes('text-2xl font-bold text-center text-green-800 dark:text-green-200')

    @staticmethod
    def create_game_result_card(chameleon_caught, chameleon_name, word):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã"""
        if chameleon_caught:
            with ui.card().classes('bg-green-100 dark:bg-green-900 p-4 mb-4 rounded-lg'):
                ui.label(f'–•–∞–º–µ–ª–µ–æ–Ω ({chameleon_name}) –±—ã–ª –ø–æ–π–º–∞–Ω!').classes(
                    'text-center text-green-700 dark:text-green-300 font-bold text-lg mb-2')
                ui.label('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–±–µ–¥–∏–ª–∞.').classes(
                    'text-center text-green-800 dark:text-green-200')
                ui.label(f'–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: {word}').classes('text-center mt-2')
        else:
            with ui.card().classes('bg-yellow-100 dark:bg-yellow-900 p-4 mb-4 rounded-lg'):
                ui.label('–•–∞–º–µ–ª–µ–æ–Ω –Ω–µ –±—ã–ª –ø–æ–π–º–∞–Ω! –•–∞–º–µ–ª–µ–æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç!').classes(
                    'text-center text-yellow-700 dark:text-yellow-300 font-bold text-lg mb-2')
                ui.label(f'–•–∞–º–µ–ª–µ–æ–Ω–æ–º –±—ã–ª –∏–≥—Ä–æ–∫ {chameleon_name}').classes(
                    'text-center text-yellow-800 dark:text-yellow-200 mb-2')
                ui.label(f'–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: {word}').classes('text-center text-yellow-800 dark:text-yellow-200')