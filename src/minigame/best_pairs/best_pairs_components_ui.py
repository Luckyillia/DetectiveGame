from nicegui import ui
from datetime import datetime


class BestPairsComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∏–≥—Ä—ã –õ—É—á—à–∏–µ –ü–∞—Ä—ã"""

    @staticmethod
    def create_header(title, subtitle=None, icon_name=None):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        with ui.column().classes('w-full items-center'):
            if icon_name:
                ui.icon(icon_name).classes('text-3xl text-purple-500 dark:text-purple-400 mb-2')

            ui.label(title).classes('text-2xl font-bold text-center text-purple-600 dark:text-purple-400')

            if subtitle:
                ui.label(subtitle).classes('text-center text-gray-600 dark:text-gray-300')

    @staticmethod
    def create_status_indicator(text, status_type="info"):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º –∏ –∏–∫–æ–Ω–∫–æ–π"""
        status_configs = {
            "info": {"icon": "info", "bg": "bg-purple-100 dark:bg-purple-900",
                     "text": "text-purple-700 dark:text-purple-300"},
            "waiting": {"icon": "hourglass_empty", "bg": "bg-amber-100 dark:bg-amber-900",
                        "text": "text-amber-700 dark:text-amber-300"},
            "success": {"icon": "check_circle", "bg": "bg-green-100 dark:bg-green-900",
                        "text": "text-green-700 dark:text-green-300"},
            "error": {"icon": "error", "bg": "bg-red-100 dark:bg-red-900",
                      "text": "text-red-700 dark:text-red-300"},
            "warning": {"icon": "warning", "bg": "bg-yellow-100 dark:bg-yellow-900",
                        "text": "text-yellow-700 dark:text-yellow-300"}
        }

        config = status_configs.get(status_type, status_configs["info"])

        with ui.row().classes(f'items-center justify-center {config["bg"]} rounded-lg p-3 w-full'):
            ui.icon(config["icon"]).classes(f'{config["text"]} text-2xl mr-2')
            ui.label(text).classes(f'text-lg font-medium {config["text"]}')

    @staticmethod
    def create_player_table(players, current_player_id=None, is_waiting=True):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä–æ–∫–æ–≤"""
        columns = [
            {'name': 'index', 'label': '‚Ññ', 'field': 'index', 'align': 'center', 'width': '50px'},
            {'name': 'name', 'label': '–ò–º—è –∏–≥—Ä–æ–∫–∞', 'field': 'name', 'align': 'center'},
            {'name': 'status', 'label': '–°—Ç–∞—Ç—É—Å', 'field': 'status', 'align': 'center'},
        ]

        if not is_waiting:
            columns.append({'name': 'score', 'label': '–û—á–∫–∏', 'field': 'score', 'align': 'center'})
            columns.append({'name': 'guesses', 'label': '–£–≥–∞–¥–∞–Ω–æ –ø–∞—Ä', 'field': 'guesses', 'align': 'center'})

        rows = []
        for idx, player in enumerate(players):
            row = {
                'index': idx + 1,
                'name': player['name'],
                'status': '‚úÖ –ì–æ—Ç–æ–≤' if player.get('is_ready', False) else '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                'score': player.get('score', 0),
                'guesses': player.get('guesses', 0)
            }

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            if player['id'] == current_player_id:
                row['name'] = f"üéÆ {row['name']}"

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ö–æ—Å—Ç–∞
            if player.get('is_host', False):
                row['name'] = f"üëë {row['name']}"

            rows.append(row)

        ui.table(columns=columns, rows=rows, row_key='index').classes('w-full')

    @staticmethod
    def create_noun_card(noun, index):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ"""
        with ui.card().classes(
                'p-4 bg-white dark:bg-gray-700 shadow-lg hover:shadow-xl transition-shadow cursor-pointer'):
            ui.label(f"{index + 1}").classes('text-sm text-gray-500 dark:text-gray-400 mb-1')
            ui.label(noun).classes('text-lg font-bold text-center text-gray-800 dark:text-gray-200')

    @staticmethod
    def create_adjective_card(adjective, is_revealed=False):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ"""
        with ui.card().classes('p-4 shadow-lg hover:shadow-xl transition-shadow'):
            if is_revealed:
                ui.label(adjective).classes('text-lg font-bold text-center text-purple-700 dark:text-purple-300')
            else:
                ui.icon('help_outline').classes('text-2xl text-gray-400 mx-auto')
                ui.label('?').classes('text-lg font-bold text-center text-gray-400')

    @staticmethod
    def create_pairing_display(nouns, adjectives, pairings=None, is_host_view=False):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö"""
        with ui.grid(columns=2).classes('w-full gap-4 mb-4'):
            # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
            with ui.column().classes('w-full'):
                ui.label('–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ').classes('text-lg font-bold mb-2 text-center')
                for idx, noun in enumerate(nouns):
                    BestPairsComponents.create_noun_card(noun, idx)

            # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
            with ui.column().classes('w-full'):
                ui.label('–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ').classes('text-lg font-bold mb-2 text-center')
                if is_host_view and pairings:
                    # –î–ª—è –≤–µ–¥—É—â–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
                    for noun_idx in range(len(nouns)):
                        adj = pairings.get(noun_idx, '?')
                        BestPairsComponents.create_adjective_card(adj, is_revealed=True)
                else:
                    # –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    for _ in range(len(adjectives)):
                        BestPairsComponents.create_adjective_card('?', is_revealed=False)

    @staticmethod
    def create_round_indicator(current_round):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞"""
        round_info = {
            1: ("–í–µ–¥—É—â–∏–π —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–∞—Ä—ã", "psychology"),
            2: ("–ò–≥—Ä–æ–∫–∏ –¥–µ–ª–∞—é—Ç –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è", "group"),
            3: ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "fact_check"),
            4: ("–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞", "emoji_events")
        }

        text, icon = round_info.get(current_round, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø", "help"))

        with ui.row().classes('items-center justify-center bg-purple-100 dark:bg-purple-900 rounded-lg p-3 w-full'):
            ui.icon(icon).classes('text-purple-500 dark:text-purple-400 text-2xl mr-2')
            ui.label(f"–≠—Ç–∞–ø {current_round}: {text}").classes(
                'text-lg font-medium text-purple-700 dark:text-purple-300')

    @staticmethod
    def create_score_display(scores):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞"""
        with ui.card().classes('w-full p-4 bg-purple-50 dark:bg-purple-900 rounded-lg'):
            ui.label('–°—á—ë—Ç –∏–≥—Ä—ã').classes('text-lg font-bold mb-2 text-center text-purple-700 dark:text-purple-300')

            sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)

            for idx, (player_name, score) in enumerate(sorted_scores):
                medal = ""
                if idx == 0:
                    medal = "ü•á"
                elif idx == 1:
                    medal = "ü•à"
                elif idx == 2:
                    medal = "ü•â"

                with ui.row().classes('w-full justify-between items-center py-1'):
                    ui.label(f"{medal} {player_name}").classes('text-purple-700 dark:text-purple-300')
                    ui.label(f"{score} –æ—á–∫–æ–≤").classes('font-bold text-purple-800 dark:text-purple-200')

    @staticmethod
    def create_result_card(correct_pairings, player_guesses, score):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—É–Ω–¥–∞"""
        with ui.card().classes('w-full p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg'):
            ui.label('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞').classes(
                'text-xl font-bold mb-4 text-center text-purple-700 dark:text-purple-300')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã
            ui.label('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã:').classes('font-bold mb-2')
            with ui.column().classes('w-full mb-4'):
                for noun, adj in correct_pairings.items():
                    with ui.row().classes('w-full justify-center mb-1'):
                        ui.label(f"{noun} ‚Äî {adj}").classes('text-gray-700 dark:text-gray-300')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–≥–∞–¥–∫–∏ –∏–≥—Ä–æ–∫–∞
            ui.label('–í–∞—à–∏ –¥–æ–≥–∞–¥–∫–∏:').classes('font-bold mb-2')
            correct_count = 0
            with ui.column().classes('w-full mb-4'):
                for noun, adj in player_guesses.items():
                    is_correct = correct_pairings.get(noun) == adj
                    if is_correct:
                        correct_count += 1

                    icon = "‚úÖ" if is_correct else "‚ùå"
                    color = "text-green-600" if is_correct else "text-red-600"

                    with ui.row().classes('w-full justify-center mb-1'):
                        ui.label(f"{icon} {noun} ‚Äî {adj}").classes(f'{color} dark:{color}')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç
            ui.label(f'–£–≥–∞–¥–∞–Ω–æ –ø–∞—Ä: {correct_count}/5').classes('text-center text-lg font-bold mb-2')
            ui.label(f'–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–∫–æ–≤: {score}').classes(
                'text-center text-xl font-bold text-purple-700 dark:text-purple-300')